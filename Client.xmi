#include "Global.xm"
#include "HBTSStatusBarView.mm"

#import <Foundation/NSDistributedNotificationCenter.h>
#import <UIKit/UIApplication+Private.h>
#import <UIKit/UIStatusBarForegroundView.h>

#pragma mark - Show/Hide Overlay

void HBTSSetStatusBar(HBTSStatusBarType type, NSString *name, BOOL typing) {
	if (name && ![name isEqualToString:@""]) {
		[overlayView showWithType:type name:name timeout:typing && !typingTimeout ? kHBTSTypingTimeout : overlayDuration];
	} else {
		[overlayView hide];
	}
}

#pragma mark - Preferences management

%ctor {
	prefsBundle = [[NSBundle bundleWithPath:@"/Library/PreferenceBundles/TypeStatus.bundle"] retain];

	CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), NULL, (CFNotificationCallback)HBTSLoadPrefs, CFSTR("ws.hbang.typestatus/ReloadPrefs"), NULL, 0);

#pragma mark - Status bar overlay management

	[[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidFinishLaunchingNotification object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *notification) {
		UIStatusBarForegroundView *foregroundView = MSHookIvar<UIStatusBarForegroundView *>([UIApplication sharedApplication].statusBar, "_foregroundView");

		overlayView = [[HBTSStatusBarView alloc] initWithFrame:foregroundView.frame];
		[[UIApplication sharedApplication].statusBar addSubview:overlayView];

		HBTSLoadPrefs();

		[[NSDistributedNotificationCenter defaultCenter] addObserverForName:HBTSClientSetStatusBarNotification object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(NSNotification *notification) {
			BOOL typing = ((NSNumber *)notification.userInfo[@"Typing"]).boolValue;

			if ([[NSDate date] timeIntervalSinceDate:notification.userInfo[@"Date"]] > (typing && !typingTimeout ? kHBTSTypingTimeout : overlayDuration)) {
				return;
			}

			HBTSSetStatusBar((HBTSStatusBarType)((NSNumber *)notification.userInfo[@"Type"]).intValue, notification.userInfo[@"Name"], typing);
		}];
	}];
}
