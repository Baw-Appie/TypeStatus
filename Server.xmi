#define IMAGENT 1

#include "Global.xm"
//#include "HBTSBulletinProvider.m"
#include <substrate.h>
#import <libstatusbar/LSStatusBarItem.h>
#import <ChatKit/CKEntity.h>
#import <ChatKit/CKIMEntity.h>
#import <ChatKit/CKMadridEntity.h>
#import <ChatKit/CKMadridService.h>
#import <Foundation/NSDistributedNotificationCenter.h>
#import <IMCore/IMHandle.h>
#import <IMDaemonCore/IMDMessageStore.h>
#import <IMFoundation/FZMessage.h>
#import <SpringBoardServices/SpringBoardServices.h>
#include <notify.h>
#import <version.h>

NSUInteger typingIndicators = 0;
LSStatusBarItem *statusBarItem;

NSTimer *typingTimer;
BOOL isTyping = NO;
NSMutableDictionary *nameCache = [@{
	@"example@hbang.ws": @"John Appleseed",
	@"imast777@imast777.me": @"The Devil",
} mutableCopy];

NSArray *messagesApps = @[ @"com.apple.MobileSMS", @"com.bitesms" ];

#pragma mark - Communication with clients

void HBTSPostMessage(HBTSStatusBarType type, NSString *string, BOOL typing) {
	/*
	BOOL lockStatus = NO;
	SBGetScreenLockStatus(SBSSpringBoardServerPort(), &lockStatus, NULL);

	if (useBulletin && lockStatus) {
		//[[HBTSBulletinProvider sharedInstance] showBulletinOfType:type string:string];
		return;
	} else if (shouldUndim && lockStatus) {
		SBSUndimScreen();
	}
	*/

	dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
		[[NSDistributedNotificationCenter defaultCenter] postNotification:[NSNotification notificationWithName:HBTSClientSetStatusBarNotification object:nil userInfo:@{
			@"Type": @(type),
			@"Name": string ?: @"",
			@"Typing": @(typing),
			@"Date": [NSDate date]
		}]];
	});
}

#pragma mark - Hide while Messages is open

BOOL HBTSShouldHide(BOOL typing) {
	if (typing ? typingHideInMessages : readHideInMessages) {
		char frontmostIdentifier[256];
		SBFrontmostApplicationDisplayIdentifier(SBSSpringBoardServerPort(), frontmostIdentifier);

		return [messagesApps containsObject:IN_SPRINGBOARD ? [NSString stringWithUTF8String:frontmostIdentifier] : [NSBundle mainBundle].bundleIdentifier];
	}

	return NO;
}

#pragma mark - Get contact name

NSString *HBTSNameForHandle(NSString *handle) {
	if (IS_IOS_OR_NEWER(iOS_7_0)) {
		return handle; // quick hack
	}

	if (nameCache[handle]) {
		return nameCache[handle];
	} else {
		NSString *name = handle;

		if (%c(CKIMEntity)) { // 6.x
			CKIMEntity *entity = [[%c(CKIMEntity) copyEntityForAddressString:handle] autorelease];

			if ([entity respondsToSelector:@selector(handle)]) { // 7.0+
				name = entity.handle._displayNameWithAbbreviation ?: entity.name;
			} else { // 6.x
				name = entity.name;
			}
		} else if (%c(CKMadridService)) { // 5.x
			CKMadridService *service = [[[%c(CKMadridService) alloc] init] autorelease];
			CKMadridEntity *entity = [[service copyEntityForAddressString:handle] autorelease];
			name = entity.name;
		}

		if (name && ![name isEqualToString:handle]) {
			nameCache[handle] = [name copy];
		}

		return name ?: handle;
	}
}

#pragma mark - Show/hide functions

void HBTSTypingStarted(FZMessage *message, BOOL testing) {
	typingIndicators++;
	isTyping = YES;

	if (HBTSShouldHide(YES)) {
		return;
	}

	if (typingIcon) {
		if (!statusBarItem) {
			statusBarItem = [[%c(LSStatusBarItem) alloc] initWithIdentifier:@"ws.hbang.typestatus.icon" alignment:StatusBarAlignmentRight];
			statusBarItem.imageName = @"TypeStatus";
		}

		statusBarItem.visible = YES;

		if (typingTimer) {
			[typingTimer invalidate];
			[typingTimer release];
			typingTimer = nil;
		}

		if (typingTimeout || testing) {
			typingTimer = [[NSTimer scheduledTimerWithTimeInterval:testing ? overlayDuration : kHBTSTypingTimeout target:message selector:@selector(typeStatus_typingEnded) userInfo:nil repeats:NO] retain];
		}
	}

	if (typingStatus) {
		HBTSPostMessage(HBTSStatusBarTypeTyping, HBTSNameForHandle(message.handle), !testing);
	}
}

void HBTSTypingEnded() {
	typingIndicators--;

	if (typingIndicators <= 0) {
		typingIndicators = 0;
		isTyping = NO;
	}

	if (!isTyping) {
		if (statusBarItem) {
			statusBarItem.visible = NO;
		}

		if (typingTimer) {
			[typingTimer invalidate];
			[typingTimer release];
			typingTimer = nil;
		}

		if (typingStatus) {
			HBTSPostMessage(HBTSStatusBarTypeTyping, nil, NO);
		}
	}
}

void HBTSMessageRead(FZMessage *message) {
	if (readStatus && !HBTSShouldHide(NO)) {
		HBTSPostMessage(HBTSStatusBarTypeRead, HBTSNameForHandle(message.handle), NO);
	}
}

#pragma mark - Test functions

void HBTSTestTyping() {
	typingIndicators = 0;

	/*
	 We could have linked against IMFoundation, if not for it
	 being set up insanely on iOS 5:
	 IMCore.framework/Frameworks/IMFoundation.framework
	*/

	FZMessage *message = [[[%c(FZMessage) alloc] init] autorelease];
	message.handle = @"example@hbang.ws";

	HBTSTypingStarted(message, YES);
}

void HBTSTestRead() {
	FZMessage *message = [[[%c(FZMessage) alloc] init] autorelease];
	message.handle = @"example@hbang.ws";

	HBTSMessageRead(message);
}

#pragma mark - iMessage hooks

%group JonyIveIsCool

%hook IMDServiceSession

- (void)didReceiveMessage:(FZMessage *)message forChat:(id)chat style:(unsigned char)style {
	%orig;

	if (message.flags == FZMessageFlagsTypingBegan) {
		HBTSTypingStarted(message, NO);
	} else {
		HBTSTypingEnded();
	}
}

- (void)didReceiveMessageReadReceiptForMessageID:(NSString *)messageID date:(NSDate *)date completionBlock:(id)completion {
	%orig;
	HBTSMessageRead([[%c(IMDMessageStore) sharedInstance] messageWithGUID:messageID]);
}

%end

%end

%group ForstallForTheWin

%hook IMDaemonListener

- (void)account:(id)account chat:(id)chat style:(unsigned char)style chatProperties:(id)properties messageReceived:(FZMessage *)message {
	%orig;

	if (message.flags == FZMessageFlagsTypingBegan) {
		HBTSTypingStarted(message, NO);
	} else {
		HBTSTypingEnded();
	}
}

%end

%hook FZMessage

// todo: make this less hacky

- (void)setTimeRead:(NSDate *)timeRead {
	%orig;

	if (!self.sender && [[NSDate date] timeIntervalSinceDate:self.timeRead] < 1) {
		HBTSMessageRead(self);
	}
}

%end

%end

%hook FZMessage

%new - (void)typeStatus_typingEnded {
	HBTSTypingEnded();
}

%end

#pragma mark - Register bulletin data provider

/*
%hook BBDataProviderManager

- (void)_loadAllDataProviderPluginBundles {
	%orig;
	[self _addDataProvider:[HBTSBulletinProvider sharedInstance] sortSectionsNow:YES];
}

%end
*/

#pragma mark - Preferences management and notification listeners

%ctor {
	@autoreleasepool {
		/*
		Class serverClass = %c(BBDataProviderManager) ?: BBServer.class;
		%init(BBDataProviderManager = serverClass);
		*/

		dlopen("/Library/MobileSubstrate/DynamicLibraries/libstatusbar.dylib", RTLD_LAZY);

		%init;

		if (IS_IOS_OR_NEWER(iOS_7_0)) {
			%init(JonyIveIsCool);
		} else {
			%init(ForstallForTheWin);
		}

		HBTSLoadPrefs();

		CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), NULL, (CFNotificationCallback)HBTSLoadPrefs, CFSTR("ws.hbang.typestatus/ReloadPrefs"), NULL, 0);

		CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), NULL, (CFNotificationCallback)HBTSTestTyping, CFSTR("ws.hbang.typestatus/TestTyping"), NULL, 0);
		CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), NULL, (CFNotificationCallback)HBTSTestRead, CFSTR("ws.hbang.typestatus/TestRead"), NULL, 0);
	}
}
